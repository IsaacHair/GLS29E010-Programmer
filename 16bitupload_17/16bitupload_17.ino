 #define LEN 212
 #define JMP 0
 #define OUT 2
 #define ADR 4
 #define BUF 6
 #define I 0
 #define R 1
uint16_t prog[LEN][4]={ //ram: 200X-202X = pathway flags; 2040,2050,2060, 2070 = bit select flags; 2080 = carry flag
                        //1000-1003 = pointer; 0040-004F = number incremented; 000X-003X = pathway memory
                        //program: 00XX -> reset each incrementation; 1XXX/2XXX -> increment the number; 3XXX -> increment the pointer
    {0x0000, OUT+0, 0xffff, 0x0001}, //output zeroing
    
    {0x0001, ADR+0, 0xffff, 0x0002}, //reset pointer
    {0x0002, ADR+1, 0x1000, 0x0003},
    {0x0003, BUF+1, 0x0000, 0x0004},
    
    {0x0004, ADR+0, 0xffff, 0x0005},
    {0x0005, ADR+1, 0x1001, 0x0006},
    {0x0006, BUF+1 , 0x0000, 0x0007},
    
    {0x0007, ADR+0, 0xffff, 0x0008},
    {0x0008, ADR+1, 0x1002, 0x0009},
    {0x0009, BUF+0, 0x0000, 0x000a},
    
    {0x000a, ADR+0, 0xffff, 0x000b},
    {0x000b, ADR+1, 0x1003, 0x000c},
    {0x000c, BUF+1, 0x0000, 0x000d},

    {0x000d, ADR+0, 0xffff, 0x000e}, //flag reset
    {0x000e, ADR+1, 0x2080, 0x000f},
    {0x000f, BUF+1, 0x0000, 0x0010},

    {0x0010, ADR+0, 0xffff, 0x0011},
    {0x0011, ADR+1, 0x2040, 0x0012},
    {0x0012, BUF+0, 0x0000, 0x0013},

    {0x0013, ADR+0, 0xffff, 0x0014},
    {0x0014, ADR+1, 0x2050, 0x0015},
    {0x0015, BUF+0, 0x0000, 0x0016},
    
    {0x0016, ADR+0, 0xffff, 0x0017},
    {0x0017, ADR+1, 0x2060, 0x0018},
    {0x0018, BUF+0, 0x0000, 0x0019},

    {0x0019, ADR+0, 0xffff, 0x001a},
    {0x001a, ADR+1, 0x2070, 0x001b},
    {0x001b, BUF+0, 0x0000, 0x001c},

    {0x001c, ADR+0, 0xffff, 0x001d},
    {0x001d, ADR+1, 0x2000, 0x001e},
    {0x001e, BUF+0, 0x0000, 0x1000},

    {0x1000, ADR+0, 0xffff, 0x1001}, //setting the next flag
    {0x1001, ADR+1, 0x2040, 0x1002},
    {0x1002, JMP+R, 0x0000, 0x1004},
    {0x1004, BUF+1, 0x0000, 0x1010},
    
    {0x1005, ADR+0, 0xffff, 0x1006},
    {0x1006, ADR+1, 0x2050, 0x1007},
    {0x1007, JMP+R, 0x0000, 0x1008},
    {0x1008, BUF+1, 0x0000, 0x1012},

    {0x1009, ADR+0, 0xffff, 0x100a},
    {0x100a, ADR+1, 0x2060, 0x100b},
    {0x100b, JMP+R, 0x0000, 0x100c},
    {0x100c, BUF+1, 0x0000, 0x1014},

    {0x100d, ADR+0, 0xffff, 0x100e},
    {0x100e, ADR+1, 0x2070, 0x100f},
    {0x100f, BUF+1, 0x0000, 0x1016},

    {0x1010, ADR+0, 0xffff, 0x1011},
    {0x1011, ADR+1, 0x1000, 0x1018},

    {0x1012, ADR+0, 0xffff, 0x1013},
    {0x1013, ADR+1, 0x1001, 0x1018},

    {0x1014, ADR+0, 0xffff, 0x1015},
    {0x1015, ADR+1, 0x1002, 0x1018},

    {0x1016, ADR+0, 0xffff, 0x1017},
    {0x1017, ADR+1, 0x1003, 0x1018},

    {0x1018, JMP+R, 0x0000, 0x101a},
    {0x101a, OUT+0, 0x0000, 0x1100},
    {0x101b, OUT+0, 0x0000, 0x2100},

    {0x1100, ADR+0, 0xffff, 0x1101}, //setting pathway and its internal flags for (pointer bit == 0)
    {0x1101, ADR+1, 0x2000, 0x1102},
    {0x1102, JMP+R, 0x0000, 0x1104},
    {0x1104, BUF+1, 0x0000, 0x1106},
    {0x1105, OUT+0, 0x0000, 0x110c},
    {0x1106, ADR+0, 0xfff0, 0x1107},
    {0x1107, ADR+1, 0x0000, 0x1108},
    {0x1108, BUF+0, 0x0000, 0x1109},
    {0x1109, ADR+0, 0xfff0, 0x110a},
    {0x110a, ADR+1, 0x2010, 0x110b},
    {0x110b, BUF+0, 0x0000, 0x1000},
    {0x110c, ADR+0, 0xfff0, 0x110d},
    {0x110d, ADR+1, 0x0000, 0x110e},
    {0x110e, JMP+R, 0x0000, 0x1110},
    {0x1110, ADR+0, 0xfff0, 0x1112},
    {0x1111, ADR+0, 0xfff0, 0x1113},
    {0x1112, ADR+1, 0x0000, 0x1114},
    {0x1113, ADR+1, 0x0001, 0x1114},
    {0x1114, OUT+1, 0x0000, 0x1200},

    {0x1200, ADR+0, 0xfff0, 0x1201},
    {0x1201, ADR+1, 0x2010, 0x1202},
    {0x1202, JMP+R, 0x0000, 0x1204},
    {0x1204, BUF+1, 0x0000, 0x1206},
    {0x1205, OUT+0, 0x0000, 0x120c},
    {0x1206, ADR+0, 0xfff0, 0x1207},
    {0x1207, ADR+1, 0x0010, 0x1208},
    {0x1208, BUF+0, 0x0000, 0x1209},
    {0x1209, ADR+0, 0xfff0, 0x120a},
    {0x120a, ADR+1, 0x2020, 0x120b},
    {0x120b, BUF+0, 0x0000, 0x1000},
    {0x120c, ADR+0, 0xfff0, 0x120d},
    {0x120d, ADR+1, 0x0010, 0x120e},
    {0x120e, JMP+R, 0x0000, 0x1210},
    {0x1210, ADR+0, 0xfff0, 0x1212},
    {0x1211, ADR+0, 0xfff0, 0x1213},
    {0x1212, ADR+1, 0x0000, 0x1214},
    {0x1213, ADR+1, 0x0002, 0x1214},
    {0x1214, OUT+1, 0x0000, 0x1300},

    {0x1300, ADR+0, 0xfff0, 0x1301}, //2nd set
    {0x1301, ADR+1, 0x2020, 0x1302},
    {0x1302, JMP+R, 0x0000, 0x1304},
    {0x1304, BUF+1, 0x0000, 0x1306},
    {0x1305, OUT+0, 0x0000, 0x130c},
    {0x1306, ADR+0, 0xfff0, 0x1307},
    {0x1307, ADR+1, 0x0020, 0x1308},
    {0x1308, BUF+0, 0x0000, 0x1309},
    {0x1309, ADR+0, 0xfff0, 0x130a},
    {0x130a, ADR+1, 0x2040, 0x130b},
    {0x130b, BUF+0, 0x0000, 0x1000},
    {0x130c, ADR+0, 0xfff0, 0x130d},
    {0x130d, ADR+1, 0x0020, 0x130e},
    {0x130e, JMP+R, 0x0000, 0x1310},
    {0x1310, ADR+0, 0xfff0, 0x1312},
    {0x1311, ADR+0, 0xfff0, 0x1313},
    {0x1312, ADR+1, 0x0000, 0x1314},
    {0x1313, ADR+1, 0x0004, 0x1314},
    {0x1314, OUT+1, 0x0000, 0x1400},

    {0x1400, ADR+0, 0xfff0, 0x1401},
    {0x1401, ADR+1, 0x2040, 0x1402},
    {0x1402, JMP+R, 0x0000, 0x1404},
    {0x1404, BUF+1, 0x0000, 0x1406},
    {0x1405, OUT+0, 0x0000, 0x140c},
    {0x1406, ADR+0, 0xfff0, 0x1407},
    {0x1407, ADR+1, 0x0040, 0x1408},
    {0x1408, BUF+0, 0x0000, 0x1409},
    {0x1409, ADR+0, 0xfff0, 0x140a},
    {0x140a, ADR+1, 0x2080, 0x140b},
    {0x140b, BUF+0, 0x0000, 0x1000},
    {0x140c, ADR+0, 0xfff0, 0x140d},
    {0x140d, ADR+1, 0x0040, 0x140e},
    {0x140e, JMP+R, 0x0000, 0x1410},
    {0x1410, ADR+0, 0xfff0, 0x1412},
    {0x1411, ADR+0, 0xfff0, 0x1413},
    {0x1412, ADR+1, 0x0000, 0x1414},
    {0x1413, ADR+1, 0x0008, 0x1414},
    {0x1414, OUT+1, 0x0000, 0x3000},

    {0x2100, ADR+0, 0xffff, 0x2101}, //setting pathway and its internal flags for (pointer bit == 1)
    {0x2101, ADR+1, 0x2000, 0x2102},
    {0x2102, JMP+R, 0x0000, 0x2104},
    {0x2104, BUF+1, 0x0000, 0x2106},
    {0x2105, OUT+0, 0x0000, 0x210c},
    {0x2106, ADR+0, 0xfff0, 0x2107},
    {0x2107, ADR+1, 0x0000, 0x2108},
    {0x2108, BUF+1, 0x0000, 0x2109},
    {0x2109, ADR+0, 0xfff0, 0x210a},
    {0x210a, ADR+1, 0x2010, 0x210b},
    {0x210b, BUF+0, 0x0000, 0x1000},
    {0x210c, ADR+0, 0xfff0, 0x210d},
    {0x210d, ADR+1, 0x0000, 0x210e},
    {0x210e, JMP+R, 0x0000, 0x2110},
    {0x2110, ADR+0, 0xfff0, 0x2112},
    {0x2111, ADR+0, 0xfff0, 0x2113},
    {0x2112, ADR+1, 0x0000, 0x2114},
    {0x2113, ADR+1, 0x0001, 0x2114},
    {0x2114, OUT+1, 0x0000, 0x2200},

    {0x2200, ADR+0, 0xfff0, 0x2201},
    {0x2201, ADR+1, 0x2010, 0x2202},
    {0x2202, JMP+R, 0x0000, 0x2204},
    {0x2204, BUF+1, 0x0000, 0x2206},
    {0x2205, OUT+0, 0x0000, 0x220c},
    {0x2206, ADR+0, 0xfff0, 0x2207},
    {0x2207, ADR+1, 0x0010, 0x2208},
    {0x2208, BUF+1, 0x0000, 0x2209},
    {0x2209, ADR+0, 0xfff0, 0x220a},
    {0x220a, ADR+1, 0x2020, 0x220b},
    {0x220b, BUF+0, 0x0000, 0x1000},
    {0x220c, ADR+0, 0xfff0, 0x220d},
    {0x220d, ADR+1, 0x0010, 0x220e},
    {0x220e, JMP+R, 0x0000, 0x2210},
    {0x2210, ADR+0, 0xfff0, 0x2212},
    {0x2211, ADR+0, 0xfff0, 0x2213},
    {0x2212, ADR+1, 0x0000, 0x2214},
    {0x2213, ADR+1, 0x0002, 0x2214},
    {0x2214, OUT+1, 0x0000, 0x2300},

    {0x2300, ADR+0, 0xfff0, 0x2301}, //2nd set
    {0x2301, ADR+1, 0x2020, 0x2302},
    {0x2302, JMP+R, 0x0000, 0x2304},
    {0x2304, BUF+1, 0x0000, 0x2306},
    {0x2305, OUT+0, 0x0000, 0x230c},
    {0x2306, ADR+0, 0xfff0, 0x2307},
    {0x2307, ADR+1, 0x0020, 0x2308},
    {0x2308, BUF+1, 0x0000, 0x2309},
    {0x2309, ADR+0, 0xfff0, 0x230a},
    {0x230a, ADR+1, 0x2040, 0x230b},
    {0x230b, BUF+0, 0x0000, 0x1000},
    {0x230c, ADR+0, 0xfff0, 0x230d},
    {0x230d, ADR+1, 0x0020, 0x230e},
    {0x230e, JMP+R, 0x0000, 0x2310},
    {0x2310, ADR+0, 0xfff0, 0x2312},
    {0x2311, ADR+0, 0xfff0, 0x2313},
    {0x2312, ADR+1, 0x0000, 0x2314},
    {0x2313, ADR+1, 0x0004, 0x2314},
    {0x2314, OUT+1, 0x0000, 0x2400},

    {0x2400, ADR+0, 0xfff0, 0x2401},
    {0x2401, ADR+1, 0x2040, 0x2402},
    {0x2402, JMP+R, 0x0000, 0x2404},
    {0x2404, BUF+1, 0x0000, 0x2406},
    {0x2405, OUT+0, 0x0000, 0x240c},
    {0x2406, ADR+0, 0xfff0, 0x2407},
    {0x2407, ADR+1, 0x0040, 0x2408},
    {0x2408, BUF+1, 0x0000, 0x2409},
    {0x2409, ADR+0, 0xfff0, 0x240a},
    {0x240a, ADR+1, 0x2080, 0x240b},
    {0x240b, BUF+0, 0x0000, 0x1000},
    {0x240c, ADR+0, 0xfff0, 0x240d},
    {0x240d, ADR+1, 0x0040, 0x240e},
    {0x240e, JMP+R, 0x0000, 0x2410},
    {0x2410, ADR+0, 0xfff0, 0x2412},
    {0x2411, ADR+0, 0xfff0, 0x2413},
    {0x2412, ADR+1, 0x0000, 0x2414},
    {0x2413, ADR+1, 0x0008, 0x2414},
    {0x2414, OUT+1, 0x0000, 0x3000},

    {0x3000, JMP+I, 0x0001, 0x3002},
    {0x3002, OUT+1, 0x0000, 0x3000},
    {0x3003, OUT+1, 0x0000, 0x3004},
    
    };


void setup() {
  int i, j;

  for (i = 0; i < 54; i++)
    pinMode(i, OUTPUT);

  digitalWrite(52, HIGH);
  digitalWrite(53, HIGH);
  
  for (i = 0; i < 160; i++, delay(25)) //4 second delay to reset
    if (i%2)
      digitalWrite(19, HIGH);
    else
      digitalWrite(19, LOW);

  for (i = 0; i < LEN; i++) { //write instructions
    for (j = 0; j < 52; j++) //resetting pins
      digitalWrite(j, LOW);

    for (j = 0; j < 16; j++) //current address
      if ((int) (prog[i][0]/pow(2, 15-j)) % 2)
        digitalWrite(51-j*2, HIGH);

    for (j = 35; j < 51; j++) //next address
      if ((int) (prog[i][3]/pow(2, 50-j)) % 2)
        digitalWrite(120-j*2, HIGH);

    for (j = 16; j < 19; j++) //operation code
      if ((int) (prog[i][1]/pow(2, 18-j)) % 2)
        digitalWrite(j, HIGH);

    for (j = 19; j < 35; j++) //operand
      if ((int) (prog[i][2]/pow(2, 34-j)) % 2)
        digitalWrite(j-19, HIGH);

    delay(1);
    digitalWrite(52, LOW);
    delay(1);
    digitalWrite(52, HIGH);
    delay(1);
  }

  digitalWrite(52, HIGH);
  digitalWrite(53, LOW);

  for (i = 0; i < 52; i++)
    pinMode(i, INPUT);
}

void loop() {

}
